Index: menu.py
===================================================================
diff --git a/menu.py b/menu.py
deleted file mode 100644
--- a/menu.py	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
+++ /dev/null	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
@@ -1,20 +0,0 @@
-import pygame
-from utils import *
-from world import *
-
-# Menu Principal
-class Menu:
-    def __init__(self, sprites):
-            self.data = sprites
-            self.background = Image(0, 0, WIDTH, HEIGHT, "data/menu/MenuScreen.jpg")
-
-            self.button1 = Image(1100, 300, 125, 70, "data/menu/PlayButton.png")
-            self.button2 = Image(1100, 400, 125, 70, "data/menu/HowToPlayerButton.png")
-            self.button3 = Image(1100, 500, 125, 70, "data/menu/QuitButton.png")
-
-
-
-class HowToPlay:
-    def __init__(self, sprites):
-            self.data = sprites
-            self.background = Image(0, 0, WIDTH, HEIGHT, "data/menu/MenuScreen.jpg")
Index: animations.py
===================================================================
diff --git a/animations.py b/animations.py
deleted file mode 100644
--- a/animations.py	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
+++ /dev/null	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
@@ -1,56 +0,0 @@
-import pygame
-import os
-
-class Animations(pygame.sprite.Sprite):
-    def __init__(self, x, y, w, h, action, speed, folder, orientation, loop):
-        pygame.sprite.Sprite.__init__(self)
-        self.x = x
-        self.y = y
-        self.w = w
-        self.h = h
-        self.sprites = []
-        self.size = 0
-        self.action = action
-        self.speed = speed
-        self.folder = folder
-        self.orientation = orientation
-        self.bool = True
-        self.loop = loop
-        self.inverted = self.bool
-        self.image = False
-        self.current = 0
-        self.swapAnimation(self.action)
-        self.rect = pygame.Rect(self.x, self.y, self.w, self.h)
-
-    def animation(self, loop):
-        if loop:
-            self.current += self.speed
-            if self.current > self.size:
-                self.current = 0
-        self.image = self.sprites[int(self.current)]
-        self.image = pygame.transform.scale(self.image, (self.w, self.h))
-        self.flipAnimation()
-
-    def update(self):
-        if self.loop:
-            self.animation(self.loop)
-
-    def swapAnimation(self, str):
-        self.action = str
-        self.sprites = []
-        for dir, _, files in os.walk(self.folder):
-            for file in files:
-                if dir == self.folder + self.action:
-                    self.sprites.append(pygame.image.load(os.path.join(dir, file)))
-        self.current = 0
-        self.size = len(self.sprites)
-        self.image = self.sprites[self.current]
-        self.image = pygame.transform.scale(self.image, (self.w, self.h))
-        self.flipAnimation()
-
-    def flipAnimation(self):
-        if self.orientation == "Right":
-            self.inverted = self.bool
-        elif self.orientation == "Left":
-            self.inverted = not self.bool
-        self.image = pygame.transform.flip(self.image, self.inverted, False)
\ No newline at end of file
Index: characters.py
===================================================================
diff --git a/characters.py b/characters.py
deleted file mode 100644
--- a/characters.py	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
+++ /dev/null	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
@@ -1,82 +0,0 @@
-import pygame
-from utils import *
-from animations import *
-
-# Personagem principal
-class Player():
-    def __init__(self, sprites):
-        self.animations = Animations(100, 100, 100, 100, "idle", 0.15, "data/character/", "Right", False)
-        self.physics = Physics(self.animations, sprites)
-        self.idle = True
-        self.jump = False
-        self.run = False
-        self.keys = None
-
-    def update(self):
-        self.physics.update()
-        self.keys = pygame.key.get_pressed()
-
-        # Controles de movimento
-        if self.keys[pygame.K_w]:
-            if not self.physics.fall:
-                self.animations.rect.y -= self.physics.gravity*2
-                self.controller("jump")
-
-        if self.keys[pygame.K_a]:
-            self.animations.rect.x -= self.physics.left
-            self.animations.orientation = "Left"
-            self.controller("run")
-
-        if self.keys[pygame.K_d]:
-            self.animations.rect.x += self.physics.right
-            self.animations.orientation = "Right"
-            self.controller("run")
-
-        # Aciona o update nas animações quando executar alguma ação e evita loops de animações enquanto no ar
-        if self.jump:
-            if self.animations.current < self.animations.size-1:
-                self.animations.animation(self.jump)
-            else:
-                self.animations.current = self.animations.size-1
-                self.animations.animation(False)
-        elif self.run:
-            self.animations.animation(self.run)
-        elif self.idle:
-            self.animations.animation(self.idle)
-
-        # Verifica se existe colisão e atualiza a animação entre idle e jump
-        if not self.physics.collide:
-            self.animations.rect.y += self.physics.gravity
-            self.controller("jump")
-        else:
-            if self.jump and not self.idle:
-                self.controller("idle")
-            if self.run and not self.idle:
-                self.controller("idle")
-
-    # Controladora das animações
-    def controller(self, str):
-        if not self.jump:
-            if str == "jump":
-                self.idle = False
-                self.jump = True
-                self.run = False
-                self.animations.swapAnimation(str)
-            if self.idle:
-                if str == "run" and not self.run:
-                    self.idle = False
-                    self.jump = False
-                    self.run = True
-                    self.animations.swapAnimation(str)
-            else:
-                if str == "idle" and self.run and not self.keys[pygame.K_a] and not self.keys[pygame.K_d]:
-                    self.idle = True
-                    self.jump = False
-                    self.run = False
-                    self.animations.swapAnimation(str)
-        else:
-            if not self.idle and str == "idle":
-                self.idle = True
-                self.jump = False
-                self.run = False
-                self.animations.swapAnimation(str)
\ No newline at end of file
Index: world.py
===================================================================
diff --git a/world.py b/world.py
deleted file mode 100644
--- a/world.py	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
+++ /dev/null	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
@@ -1,30 +0,0 @@
-import pygame
-from utils import *
-from animations import *
-
-class World():
-    def __init__(self):
-        self.background = Image(0, 0, WIDTH, HEIGHT, "data/environment/bg.png")
-        self.ground = Image(0, HEIGHT-125, WIDTH-200, 75, "data/environment/ground.png")
-        self.plataforms = Image(250, HEIGHT, 50, 50, "data/environment/plataform.png")
-        self.water = Image(0, HEIGHT-50, WIDTH, 50, "data/environment/water/water.png")
-        self.waterfall = None
-        self.collide = []
-        self.objects = []
-        self.collide.append(self.ground)
-        self.collide.append(self.plataforms)
-        self.objects.append(self.ground)
-        self.objects.append(self.water)
-        self.objects.append(self.plataforms)
-        self.createAnimatedWater()
-
-    def createAnimatedWater(self):
-        amount = 10
-        scale = 3
-        posX = 200
-        posY = -35
-        for i in range(amount):
-            self.waterfall = Animations(posX, posY+(i*(24*scale)), 16*scale, 24*scale, "fall", 0.15, "data/environment/water/", "Left", True)
-            self.objects.append(self.waterfall)
-        self.waterfall = Animations(posX, posY+(amount*(24*scale)-24), 16*scale, 8*scale, "fall-bottom", 0.15, "data/environment/water/", "Left", True)
-        self.objects.append(self.waterfall)
Index: utils.py
===================================================================
diff --git a/utils.py b/utils.py
deleted file mode 100644
--- a/utils.py	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
+++ /dev/null	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
@@ -1,249 +0,0 @@
-import pygame
-
-WIDTH = 1280
-HEIGHT = 720
-
-class Text():
-    def __init__(self, text, x, y, w, h, fontName, size, cr, cg, cb):
-        self.text = text or ""
-        self.x = x
-        self.y = y
-        self.w = w
-        self.h = h
-        self.size = size
-        self.fontName = fontName
-        self.folder = "data/fonts/"
-        self.cr = cr
-        self.cg = cg
-        self.cb = cb
-        self.font = pygame.font.SysFont(self.folder+self.font, self.size)
-
-class Image(pygame.sprite.Sprite):
-    def __init__(self, x, y, w, h, data):
-        pygame.sprite.Sprite.__init__(self)
-        self.x = x
-        self.y = y
-        self.w = w
-        self.h = h
-        self.data = data
-        self.swapImage(self.data)
-
-    def swapImage(self, data):
-        self.data = data
-        self.image = pygame.image.load(self.data)
-        self.image = pygame.transform.scale(self.image, (self.w, self.h))
-        self.rect = self.image.get_rect()
-        self.rect.x = self.x
-        self.rect.y = self.y
-
-class Physics():
-    def __init__(self, sprites1, sprites2):
-        self.character = sprites1
-        self.world = sprites2
-        self.collide = False
-        self.left = 5
-        self.right = 5
-        self.fall = True
-        self.up = not self.fall
-        self.height = 180
-        self.diff = None
-        self.diff_max = None
-        self.min_gravity = 3
-        self.max_gravity = 11
-        self.gravity = self.min_gravity
-        self.smooth = 1
-
-    def update(self):
-        self.collision()
-        self.maxJumpHeight()
-        self.gravityController()
-
-    def collision(self):
-        limit = False
-        for i in range(len(self.world)):
-            self.collide = pygame.Rect.colliderect(self.character.rect, self.world[i])
-            up = self.world[i].rect.top - self.character.rect.bottom
-            down = self.world[i].rect.bottom - self.character.rect.top
-            left = self.world[i].rect.right - self.character.rect.left
-            right = self.world[i].rect.left - self.character.rect.right
-            width = left - right
-            height = down - up
-            if down > 0 and down <= height-self.max_gravity:
-                if width - left == 0: 
-                    self.right = 0
-                    limit = True
-                if width - left == width:
-                    self.left = 0
-                    limit = True
-            if down <= 0 and down+self.gravity >= 0:
-                if width - left > 0 and width - left < width: 
-                    self.collide = False
-                    self.fall = True
-            if not limit:
-                self.left = 5
-                self.right = 5
-            if self.collide:
-                break
-
-    def maxJumpHeight(self):
-        if self.collide:
-            self.diff = False
-            self.fall = False
-            self.up = False
-        if not self.diff:
-            self.diff = self.character.rect.y
-            self.diff_max = self.diff-self.height
-        else:
-            if self.character.rect.y <= self.diff_max:
-                self.fall = True
-                self.up = False
-
-    def gravityController(self):
-        if not self.collide:
-            if not self.up and not self.fall:
-                self.up = True
-                self.gravity = self.max_gravity
-            # self.smooth += 0.007
-            # if self.smooth >= 1:
-            # self.smooth = 1
-            if not self.up:
-                self.gravity += self.smooth
-                if self.gravity >= self.max_gravity:
-                    self.gravity = self.max_gravity
-            else:
-                self.gravity -= self.smooth
-                if self.gravity <= self.min_gravity:
-                    self.gravity = self.min_gravity
-        else:
-            self.fall = False
-            #self.smooth = 0
-            self.gravity = self.min_gravity
-# import pygame
-
-# WIDTH = 1280
-# HEIGHT = 720
-
-# class Text():
-#     def __init__(self, text, x, y, w, h, fontName, size, cr, cg, cb):
-#         self.text = text or ""
-#         self.x = x
-#         self.y = y
-#         self.w = w
-#         self.h = h
-#         self.size = size
-#         self.fontName = fontName
-#         self.folder = "data/fonts/"
-#         self.cr = cr
-#         self.cg = cg
-#         self.cb = cb
-#         self.font = pygame.font.SysFont(self.folder+self.font, self.size)
-
-# class Image(pygame.sprite.Sprite):
-#     def __init__(self, x, y, w, h, data):
-#         pygame.sprite.Sprite.__init__(self)
-#         self.x = x
-#         self.y = y
-#         self.w = w
-#         self.h = h
-#         self.data = data
-#         self.swapImage(self.data)
-
-#     def swapImage(self, data):
-#         self.data = data
-#         self.image = pygame.image.load(self.data)
-#         self.image = pygame.transform.scale(self.image, (self.w, self.h))
-#         self.rect = self.image.get_rect()
-#         self.rect.x = self.x
-#         self.rect.y = self.y
-
-# class Physics():
-#     def __init__(self, sprites1, sprites2):
-#         self.character = sprites1
-#         self.world = sprites2
-#         self.collide = False
-#         self.bool = False
-#         self.left = 5
-#         self.right = 5
-#         self.fall = True
-#         self.up = not self.fall
-#         self.height = 180
-#         self.diff = None
-#         self.diff_max = None
-#         self.min_gravity = 3
-#         self.max_gravity = 11
-#         self.gravity = self.min_gravity
-#         self.smooth = 0.4
-
-#     def update(self):
-#         self.collision()
-#         self.maxJumpHeight()
-#         self.gravityController()
-
-#     def collision(self):
-#         for j in range(len(self.world)):
-#             self.collide = pygame.Rect.colliderect(self.character.rect, self.world[j])
-#             up = self.world[j].rect.top - self.character.rect.bottom
-#             down = self.world[j].rect.bottom - self.character.rect.top
-#             left = self.world[j].rect.right - self.character.rect.left
-#             right = self.world[j].rect.left - self.character.rect.right
-#             widht = left - right
-#             height = down - up
-#             # if self.collide and not self.bool and up < 0:
-#             #     self.bool = True
-#             #     if self.world[j].rect.y-self.character.rect.y < self.world[j].rect.h:
-#             #         teste = (self.world[j].rect.y-self.character.rect.y) - self.world[j].rect.h
-#             #         self.character.rect.y += teste
-#             #         print(teste)
-#             #     up = self.world[j].rect.top - self.character.rect.bottom
-
-#             if down > 0 :
-#                 if left == 0 and up < 0:
-#                     self.left = 0
-#                 else:
-#                     self.left = 5
-#                 if right == 0 and up < 0:
-#                     self.right = 0
-#                 else:
-#                     self.right = 5
-#             if (widht - left > 0 and widht - left < widht) and (down > 0 and down < height - down):
-#                 self.collide = False
-#                 self.fall = True
-#             if self.right == 0 or self.left == 0:
-#                 break
-#             if self.collide:
-#                 break
-#         self.bool = False
-
-#     def maxJumpHeight(self):
-#         if self.collide:
-#             self.diff = False
-#             self.fall = False
-#             self.up = False
-#         if not self.diff:
-#             self.diff = self.character.rect.y
-#             self.diff_max = self.diff-self.height
-#         else:
-#             if self.character.rect.y <= self.diff_max:
-#                 self.fall = True
-#                 self.up = False
-
-#     def gravityController(self):
-#         if not self.collide:
-#             if not self.up and not self.fall:
-#                 self.up = True
-#                 self.gravity = self.max_gravity
-#             # self.smooth += 0.007
-#             # if self.smooth >= 1:
-#             # self.smooth = 1
-#             if not self.up:
-#                 self.gravity += self.smooth
-#                 if self.gravity >= self.max_gravity:
-#                     self.gravity = self.max_gravity
-#             else:
-#                 self.gravity -= self.smooth
-#                 if self.gravity <= self.min_gravity:
-#                     self.gravity = self.min_gravity
-#         else:
-#             self.fall = False
-#             #self.smooth = 0
-#             self.gravity = self.min_gravity
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"537a875f-6c62-4e3a-bd8d-9abadaeaf7ca\" name=\"Changes\" comment=\"Adicionados:&#10;-Tela de Fundo&#10;-Chao&#10;-Gravidade&#10;-Colisao com o chao\">\r\n      <change afterPath=\"$PROJECT_DIR$/menu.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/main.py\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"GaloAgiota2\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Matheus\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <module name=\"\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 85ca154f1c57f46c4e66309c4df9255f32860f6b)
+++ b/.idea/workspace.xml	(date 1639258756658)
@@ -1,10 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="537a875f-6c62-4e3a-bd8d-9abadaeaf7ca" name="Changes" comment="Adicionados:&#10;-Tela de Fundo&#10;-Chao&#10;-Gravidade&#10;-Colisao com o chao">
-      <change afterPath="$PROJECT_DIR$/menu.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
-    </list>
+    <list default="true" id="537a875f-6c62-4e3a-bd8d-9abadaeaf7ca" name="Changes" comment="a" />
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -12,6 +9,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="PropertiesComponent">
